input {
	#file {
		#path => "~/ironrhino/logs/access.log"
		#start_position => beginning
		#ignore_older => 0
		#type => "access"
	#}
	#file {
		#path => "~/ironrhino/logs/application.log"
		#start_position => beginning
		#ignore_older => 0
		#type => "application"
	#}
	kafka {
		bootstrap_servers => "localhost:9092"
		topics => ["app.logs.access"]
		auto_offset_reset => "earliest"
		client_id => "logstash-access"
		type => "access"
	}
	kafka {
		bootstrap_servers => "localhost:9092"
		topics => ["app.logs.application"]
		auto_offset_reset => "earliest"
		client_id => "logstash-application"
		type => "application"
	}
	kafka {
		bootstrap_servers => "localhost:9092"
		topics => ["app.logs.remoting"]
		auto_offset_reset => "earliest"
		client_id => "logstash-remoting"
		type => "remoting"
	}
	kafka {
		bootstrap_servers => "localhost:9092"
		topics => ["app.logs.rest"]
		auto_offset_reset => "earliest"
		client_id => "logstash-rest"
		type => "rest"
	}
}

filter {
	if [type] == "access" {
		grok {
			match => {"message" => "%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:username}?@%{IP:client}( via %{IP:proxy})? %{WORD:verb} %{URI:url} UserAgent:%{GREEDYDATA:agent}? Referer:%{URI:referer}? request:(%{WORD:session}\.)?%{WORD:request}( chain:%{NOTSPACE:chain})?( from:%{NOTSPACE:from})?( server:%{NOTSPACE:app}@%{NOTSPACE:host})?( responseTime:%{NUMBER:responseTime:int})?"}
			remove_field => ["message", "port"]
		}
	}
	if [type] == "application" {
		grok {
			match => {"message" => "%{TIMESTAMP_ISO8601:timestamp} %{JAVACLASS:class} %{NOTSPACE:thread}( request:(%{WORD:session}\.)?%{WORD:request})?( chain:%{NOTSPACE:chain})?( from:%{NOTSPACE:from})?( server:%{NOTSPACE:app}@%{NOTSPACE:host})?( %{URI:url})? %{LOGLEVEL:loglevel} %{GREEDYDATA:message}"}
			overwrite => ["message"]
			remove_field => ["port"]
		}
	}
	if [type] == "remoting" {
		grok {
			match => {"message" => [
			"%{TIMESTAMP_ISO8601:timestamp}( request:(%{WORD:session}\.)?%{WORD:request})?( chain:%{NOTSPACE:chain})?( from:%{NOTSPACE:from})? server:%{NOTSPACE:app}@%{NOTSPACE:host} %{NOTSPACE:service} %{WORD:role} %{WORD:payloadtype}:%{GREEDYDATA:payload}",
			"%{TIMESTAMP_ISO8601:timestamp}( request:(%{WORD:session}\.)?%{WORD:request})?( chain:%{NOTSPACE:chain})?( from:%{NOTSPACE:from})? server:%{NOTSPACE:app}@%{NOTSPACE:host} %{NOTSPACE:service} %{WORD:role} Invoked from (%{NOTSPACE:clientapp}@%{NOTSPACE:clienthost})? in %{NUMBER:responseTime:int}ms",
			"%{TIMESTAMP_ISO8601:timestamp}( request:(%{WORD:session}\.)?%{WORD:request})?( chain:%{NOTSPACE:chain})?( from:%{NOTSPACE:from})? server:%{NOTSPACE:app}@%{NOTSPACE:host} %{NOTSPACE:service} %{WORD:role} Invoked to %{NOTSPACE:serverhost} %{WORD:result} in %{NUMBER:responseTime:int}ms"
			]}
			remove_field => ["message", "port"]
		}
	}
	if [type] == "rest" {
		grok {
			match => {"message" => [
			"%{TIMESTAMP_ISO8601:timestamp} %{NOTSPACE:thread}( request:(%{WORD:session}\.)?%{WORD:request})?( server:%{NOTSPACE:app}@%{NOTSPACE:host})?( %{WORD:verb} %{URI:url})?%{GREEDYDATA:payload}"
			]}
			remove_field => ["message", "port"]
		}
	}
	#if "_grokparsefailure" in [tags] {	drop { }	}
	date {
		match => ["timestamp", "yyyy-MM-dd HH:mm:ss,SSS"]
		remove_field => ["timestamp"]
	}
}

output{
	elasticsearch {
	hosts => ["localhost:9200"]
	}
}